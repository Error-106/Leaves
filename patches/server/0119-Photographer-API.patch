From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Sat, 5 Aug 2023 19:22:02 +0800
Subject: [PATCH] Photographer API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 75c4b20c1637f4b2e1a77450d30a21b4d2db5af0..afea70c6406ec2e628d647ce5e7ac80e931d7c46 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -260,6 +260,7 @@ import org.yaml.snakeyaml.error.MarkedYAMLException;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
 import top.leavesmc.leaves.entity.CraftBotManager;
+import top.leavesmc.leaves.entity.CraftPhotographerManager;
 
 import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
@@ -306,6 +307,7 @@ public final class CraftServer implements Server {
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
     private final CraftBotManager botManager = new CraftBotManager();
+    private final CraftPhotographerManager photographerManager = new CraftPhotographerManager();
 
     // Paper start - Folia region threading API
     private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
@@ -3125,4 +3127,11 @@ public final class CraftServer implements Server {
         return botManager;
     }
     // Leaves end - Bot API
+
+    // Leaves start - replay mod api
+    @Override
+    public CraftPhotographerManager getPhotographerManager() {
+        return photographerManager;
+    }
+    // Leaves end - replay mod api
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 81670f76c4d7ccec6f9e95465687c83b37c544bd..d6d1a867872c6c8968829825daa820662bc544ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -195,6 +195,8 @@ import top.leavesmc.leaves.bot.ServerBot;
 import top.leavesmc.leaves.entity.CraftBot;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
+import top.leavesmc.leaves.entity.CraftPhotographer;
+import top.leavesmc.leaves.replay.ServerPhotographer;
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -231,6 +233,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
                 // Leaves start - add CraftBot
                 if (entity instanceof ServerPlayer) {
                     if (entity instanceof ServerBot) { return new CraftBot(server, (ServerBot) entity); }
+                    if (entity instanceof ServerPhotographer) { return new CraftPhotographer(server, (ServerPhotographer) entity); }
                     else { return new CraftPlayer(server, (ServerPlayer) entity); }
                 }
                 // Leaves end - add CraftBot
diff --git a/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java
new file mode 100644
index 0000000000000000000000000000000000000000..be2914752100081460898a3211d359f364b9e159
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographer.java
@@ -0,0 +1,32 @@
+package top.leavesmc.leaves.entity;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.replay.ServerPhotographer;
+
+public class CraftPhotographer extends CraftPlayer implements Photographer {
+
+    public CraftPhotographer(CraftServer server, ServerPhotographer entity) {
+        super(server, entity);
+    }
+
+    @Override
+    public @NotNull String getId() {
+        return getHandle().createState.id;
+    }
+
+    @Override
+    public ServerPhotographer getHandle() {
+        return (ServerPhotographer) entity;
+    }
+
+    public void setHandle(final ServerPhotographer entity) {
+        super.setHandle(entity);
+    }
+
+    @Override
+    public String toString() {
+        return "CraftPhotographer{" + "name=" + getName() + '}';
+    }
+}
diff --git a/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..edb75a5d422dbb890dc5c68dea1475019946456b
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/entity/CraftPhotographerManager.java
@@ -0,0 +1,70 @@
+package top.leavesmc.leaves.entity;
+
+import com.google.common.collect.Lists;
+import org.bukkit.Location;
+import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import top.leavesmc.leaves.bot.ServerBot;
+import top.leavesmc.leaves.replay.ServerPhotographer;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.UUID;
+
+public class CraftPhotographerManager implements PhotographerManager{
+    private final Collection<Photographer> photographerViews = Collections.unmodifiableList(Lists.transform(ServerPhotographer.getPhotographers(),ServerPhotographer::getBukkitPlayer));
+
+    @Override
+    public @Nullable Photographer getPhotographer(@NotNull UUID uuid) {
+        return ServerPhotographer.getPhotographer(uuid).getBukkitPlayer();
+    }
+
+    @Override
+    public @Nullable Photographer getPhotographer(@NotNull String id) {
+        return ServerPhotographer.getPhotographer(id).getBukkitPlayer();
+    }
+
+    @Override
+    public @Nullable Photographer createPhotographer(@NotNull String id, @NotNull Location location) {
+        ServerPhotographer photographer = new ServerPhotographer.PhotographerCreateState(location, id).createSync();
+        if (photographer != null) {
+            return photographer.getBukkitPlayer();
+        }
+        return null;
+    }
+
+    @Override
+    public void createPhotographer(@NotNull String id, @NotNull Location location, Consumer<Photographer> consumer) {
+        new ServerPhotographer.PhotographerCreateState(location, id).createAsync((serverPhotographer -> {
+            consumer.accept(serverPhotographer.getBukkitPlayer());
+        }));
+    }
+
+    @Override
+    public void removePhotographer(@NotNull String id) {
+        ServerPhotographer photographer = ServerPhotographer.getPhotographer(id);
+        if (photographer != null) {
+            photographer.remove(true);
+        }
+    }
+
+    @Override
+    public void removePhotographer(@NotNull UUID uuid) {
+        ServerPhotographer photographer = ServerPhotographer.getPhotographer(uuid);
+        if (photographer != null) {
+            photographer.remove(true);
+        }
+    }
+
+    @Override
+    public void removeAllPhotographers() {
+        for(ServerPhotographer photographer:ServerPhotographer.getPhotographers()){
+            photographer.remove(true);
+        }
+    }
+    @Override
+    public Collection<Photographer> getPhotographers() {
+        return photographerViews;
+    }
+}
